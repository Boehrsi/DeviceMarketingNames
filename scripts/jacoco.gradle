project.afterEvaluate {
    android.libraryVariants.all { variant ->
        createVariantCoverage(variant)
    }
}

ext.excludes = [
        'android/**/*.*',
        '**/databinding/*Binding.*',
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/Lambda$*.class',
        '**/Lambda.class',
        '**/*BR*.*',
        '**/*Companion*.*',
        '**/*Lambda.class',
        '**/*Lambda*.class',
        '**/*$Lambda$*.*',
        '**/*Test*.*',
]

def createVariantCoverage(variant) {
    def projectFolder = project.layout.buildDirectory.asFile.get()
    def variantName = variant.name
    def testTaskName = "test${variantName.capitalize()}UnitTest"

    tasks.register("${testTaskName}Coverage", JacocoReport) {
        dependsOn(testTaskName)
        group = "testing"
        description = "Generate Jacoco coverage report."

        reports {
            html.required = true
            xml.required = true
        }

        def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: project.excludes)
        def kotlinClasses = fileTree(dir: "${projectFolder}/tmp/kotlin-classes/${variantName}", excludes: project.excludes)
        getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

        getSourceDirectories().setFrom(files([
                "$project.projectDir/src/main/java",
                "$project.projectDir/src/${variantName}/java",
                "$project.projectDir/src/main/kotlin",
                "$project.projectDir/src/${variantName}/kotlin"
        ]))

        getExecutionData().setFrom(files("${projectFolder}/outputs/unit_test_code_coverage/${variantName}UnitTest/${testTaskName}.exec"))
    }
}